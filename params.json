{"name":"Java Lightweight Network Library","tagline":"A simple lightweight network / graph library","body":"# B-Have Network Library\r\nA simple lightweight **network / graph library** written in Java. This is a software library that provides a simple set of tools \r\nto model and analyse data that can be represented as a graph or network. It provides facilities to treat a network\r\neither as directed or undirected using the same simple `Network` API. \r\n\r\nThis library hides the implementation details by using the [Guice](http://code.google.com/p/google-guice/)\r\nwhich is a dependency injection framework from *Google* that allows for code modularity.\r\n\r\n## Latest releases\r\n### Nightly builds\r\nCurrent version is 0.5-SNAPSHOT\r\n* [bhave.network-0.5-SNAPSHOT.jar](https://dl.dropboxusercontent.com/u/336879/Projects/Releases/bhave.network-0.5-SNAPSHOT-jar-with-dependencies.jar)\r\n* [bhave.network-0.5-SNAPSHOT-sources.jar](https://dl.dropboxusercontent.com/u/336879/Projects/Releases/bhave.network-0.5-SNAPSHOT-sources.jar)\r\n* [bhave.network-0.5-SNAPSHOT-javadoc.jar](https://dl.dropboxusercontent.com/u/336879/Projects/Releases/bhave.network-0.5-SNAPSHOT-javadoc.jar)\r\n\r\n\r\n\r\n## A brief overview\r\n### Hello Network\r\nThere are three basic building blocks in this network API: `Network` objects, `Node` objects and `Link` objects.\r\n\r\nTo create `Network` instances we must first initialise our [Guice](http://code.google.com/p/google-guice/) injector. \r\nThis entity is resposible for the construction of our library dependency graph. \r\n\r\n```java\r\nInjector injector = Guice.createInjector(new NetworkModule());\r\nNetwork network = injector.getInstance(Network.class);\r\n```\r\n\r\nWe create an `Injector` instance from a `NetworkModule`. This module serves as a *Guice* configuration, telling \r\nit how to resolve the various dependencies in the network library.\r\n\r\nTo **create a network** we simply ask our injector for a instance of the `Network.class`. The injector \r\nwill do the rest and supply an instance from an implementation of `Network` ready to be used.\r\n\r\nThe rest is pretty straight forward. The creation of new `Node` and `Link` objects is handled by the `Network`. \r\nBellow you can see a simple example of how one can create new nodes and links and add them to an existing network \r\ninstance.\r\n\r\n```java\r\n//create new nodes\r\nNode node1 = network.createNode();\r\nNode node2 = network.createNode();\r\n\r\n\r\n//add nodes to the network\r\nnetwork.addNode(node1);\r\nnetwork.addNode(node2);\r\n\r\n//create a new link \r\nLink link = network.createLink(node1, node2);\r\n\r\n//add a new link from node1 to node2\r\nnetwork.addLink(link);\r\n//or\r\nnetwork.addLink(node1,node2);\r\n```\r\n\r\nThats pretty much it. You can now add more nodes, return links between existing nodes, get the neighbours of a \r\ngiven node, etc.\r\n\r\n**Note:** a network instance, is *undirected* by default. This means that the direction of the links is ignored. \r\nIf you want to work explicitly with *directed* or *undirected* networks you can do it as follows:\r\n\r\n```java\r\n//get a directed network\r\nDirectedNetwork network = injector.getInstance(DirectedNetwork.class);\r\n//get an undirected network instance\r\nUndirectedNetwork network = injector.getInstance(UndirectedNetwork.class);\r\n\r\n//you can encapsulate both of these in a Network object\r\nNetwork network = injector.getInstance(DirectedNetwork.class);\r\n```\r\nThe `DirectedNetwork` and `UndirectedNetwork` interfaces are just tagging interfaces. The methods are exactly the same\r\nas a the `Network` interface, the instances created like this just behave differently.\r\n\r\n### Dynamic Networks\r\nA `DynamicNetwork` works exactly as a normal `Network` object with the addition of discrete time instances. By default, these network instances are created with a time instance `t = 0`. You can use all the operations from `Network`, these will be\r\nassociated with this time instance. Whenever you want to model a time change in your `DynamicNetwork`, you can use the \r\navailable operation `setCurrentTime(int)`. If this time instance didn't exist, a deep copy of the previous discrete time instance is created and you can now\r\nwork with the network set to the given time. If the time you are switching to already existed, the `DynamicNetwork` just \r\nalters its state so you can work on it.\r\n\r\nAn example is given bellow: \r\n```java\r\nInjector injector = Guice.createInjector(new NetworkModule());\r\nDynamicNetwork network = injector.getInstance(DynamicNetwork.class);\r\n\r\n//create new nodes at t=0\r\nNode node1 = network.createNode();\r\nNode node2 = network.createNode();\r\n\r\nnetwork.setCurrentTime(5);\r\n\r\n//create new node at t=5\r\nNode node3 = network.createNode();\r\n\r\nNetwork networkT5 = network;\r\n```\r\nNote that the `DynamicNetwork` class is a subtype of `Network` hence you can use encapsulation here. \r\nIn the previous example `networkT5` contains an instance of a network. As you loose access to the time manipulation \r\nmechanisms, you can only call methods from `Network` with this object. Moreover, all the alterations on `networkT5` are\r\ndone for `t=5`. Also note that if you set the time on the `network` object, the time on `networkT5` is also changed as they \r\nrefer the same object.\r\n\r\n## Licence\r\n B-Have Network Library\r\n \r\n * Copyright (C) 2013 Davide Nunes \r\n * Authors : Davide Nunes <davex.pt@gmail.com>\r\n * Website : http://bhaveproject.org\r\n \r\n The b-have network library is free software: you can redistribute it and/or modify\r\n it under the terms of the GNU General Public License as published by\r\n the Free Software Foundation, either version 3 of the License, or\r\n (at your option) any later version.\r\n \r\n The b-have network library is distributed in the hope that it will be useful,\r\n but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n GNU General Public License for more details.\r\n \r\n You should have received a copy of the GNU General Public License\r\n along with the b-have network library.  \r\n If not, see [GPL 3.0](http://www.gnu.org/licenses/gpl.html).\r\n \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}